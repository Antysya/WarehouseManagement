<MudDialog>
    <DialogContent>
        <MudTextField T="string" Label="Наименование" @bind-Value="_newName"></MudTextField>
        <MudTextField T="string" Label="Артикул" @bind-Value="_newCode"></MudTextField>
        <MudTd DataLabel="ProductGroup">
            <MudSelect @bind-Value="_newProductGroup">
                @if (_groups != null && _groups.Any())
                {
                    @foreach (var group in _groups)
                    {
                        <MudSelectItem T="ProductGroup" @key="group" Value="@group" Label="@group.Name" />
                    }
                }
                else
                {
                    <MudSelectItem T="ProductGroup" Value="null" Label="Нет групп" Disabled="true" />
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="ProductStatus">
            <MudSelect @bind-Value="_newProductStatuses">
                @if (_statuses != null && _statuses.Any())
                {
                    @foreach (var status in _statuses)
                    {
                        <MudSelectItem T="ProductStatuses" @key="status" Value="@status" Label="@status.Name" />
                    }
                }
                else
                {
                    <MudSelectItem T="ProductStatuses" Value="null" Label="Нет статусов" Disabled="true" />
                }
            </MudSelect>
        </MudTd>
        <MudTextField T="int" Label="Минимальный остаток" @bind-Value="_newMinStock"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отменить</MudButton>
        <MudButton Color="Color.Primary" OnClick="Add">Сохранить</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    //private IEnumerable<Products> _product;
    private IEnumerable<ProductGroup> _groups;
    private IEnumerable<ProductStatuses> _statuses;

    private string _newName = "";
    private string _newCode = "";
    private int _newMinStock = 0;
    private ProductGroup _newProductGroup = new ();
    private ProductStatuses _newProductStatuses = new();
    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        _statuses = await WarehouseApiClient.GetProductStatusesAsync();
        _groups = await WarehouseApiClient.GetProductGroupAsync();

        if (_groups != null && _groups.Any())
        {
            _newProductGroup = _groups.First();
        }

        if (_statuses != null && _statuses.Any())
        {
            _newProductStatuses = _statuses.First();
        }

        await base.OnInitializedAsync();
    }

    private async Task Add()
    {
        Products newItem = new()
            {
                Name = _newName,
                Code = _newCode,
                BoxSize = 1,
                ProductGroupId = _newProductGroup.Id,
                ProductStatusId = _newProductStatuses.Id,
                MinimumStock = _newMinStock
            };

        await WarehouseApiClient.AddProductsAsync(newItem);
             MudDialog.Close(DialogResult.Ok(true));

    }
}